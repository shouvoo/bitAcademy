/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.20
 * Generated at: 2017-12-01 07:44:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class footer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<footer class=\"navbar-fixed-bottom\">\r\n");
      out.write("\t<div id=\"jsi-illumination-container\" class=\"container\" style=\"padding-top: 10px\">\r\n");
      out.write("\t\t<h5 style=\"color: black; text-shadow: 0 0 0.5px white; float: right;\">\r\n");
      out.write("\t\t\t© 2017 BitCamp「  <i class=\"fa fa-map-marker\" aria-hidden=\"true\"></i> 미니 프로젝트 - 2  」All rights reserved \r\n");
      out.write("\t\t\t<small\r\n");
      out.write("\t\t\t\tclass=\"text-muted float-right\"> <a\r\n");
      out.write("\t\t\t\thref=\"mailto:aileen528@naver.com\">aileen528@naver.com</a>\r\n");
      out.write("\t\t\t\t&nbsp;\r\n");
      out.write("\t\t\t</small>\r\n");
      out.write("\t\t</h5>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\tvar RENDERER = {\r\n");
      out.write("\t\t\tSNOW_COUNT : 400,\r\n");
      out.write("\t\t\tHUMAN_COUNT : 10,\r\n");
      out.write("\t\t\tDEPTH : 5,\r\n");
      out.write("\t\t\tVELOCITY : 0.5,\r\n");
      out.write("\t\t\tRADIUS : 5,\r\n");
      out.write("\t\t\tDELTA_THETA : Math.PI / 2000,\r\n");
      out.write("\t\t\tGROUND_RATE : 0.6,\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tinit : function(){\r\n");
      out.write("\t\t\t\tthis.setParameters();\r\n");
      out.write("\t\t\t\tthis.reconstructMethod();\r\n");
      out.write("\t\t\t\tthis.createElements();\r\n");
      out.write("\t\t\t\tthis.render();\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tsetParameters : function(){\r\n");
      out.write("\t\t\t\tthis.$container = $('#jsi-illumination-container');\r\n");
      out.write("\t\t\t\tthis.width = this.$container.width();\r\n");
      out.write("\t\t\t\tthis.height = this.$container.height();\r\n");
      out.write("\t\t\t\tthis.context = $('<canvas />').attr({width : this.width, height : this.height}).appendTo(this.$container).get(0).getContext('2d');\r\n");
      out.write("\t\t\t\tthis.elements = [];\r\n");
      out.write("\t\t\t\tthis.count = 0;\r\n");
      out.write("\t\t\t\tthis.theta = 0;\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tgetRandomValue : function(range){\r\n");
      out.write("\t\t\t\treturn range.min + (range.max - range.min) * Math.random();\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\treconstructMethod : function(){\r\n");
      out.write("\t\t\t\tthis.render = this.render.bind(this);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcreateElements : function(){\r\n");
      out.write("\t\t\t\tthis.tree = TREE.init(this, this.elements);\r\n");
      out.write("\t\t\t\tthis.count = this.elements.length;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var i = 0, length = this.SNOW_COUNT; i < length; i++){\r\n");
      out.write("\t\t\t\t\tthis.elements.push(new PARTICLE_SNOW(this));\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tfor(var i = 0, length = this.HUMAN_COUNT; i < length; i++){\r\n");
      out.write("\t\t\t\t\tthis.elements.push(new HUMAN(this));\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\trender : function(){\r\n");
      out.write("\t\t\t\trequestAnimationFrame(this.render);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar context = this.context,\r\n");
      out.write("\t\t\t\t\tcount = 0,\r\n");
      out.write("\t\t\t\t\tgradient = context.createLinearGradient(0, 0, 0, this.height),\r\n");
      out.write("\t\t\t\t\tbase = (25 + 15 * Math.cos(this.theta));\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tgradient.addColorStop(0, 'hsl(210, 50%, ' + (base + 30) + '%)');\r\n");
      out.write("\t\t\t\tgradient.addColorStop(1, 'hsl(210, 50%, ' + base + '%)');\r\n");
      out.write("\t\t\t\tcontext.fillStyle = gradient;\r\n");
      out.write("\t\t\t\tcontext.fillRect(0, 0, this.width, this.height);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tthis.elements.sort(function(particle1, particle2){\r\n");
      out.write("\t\t\t\t\treturn particle1.verticalThreshold - particle2.verticalThreshold;\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tfor(var i = 0, length = this.elements.length; i < length; i++){\r\n");
      out.write("\t\t\t\t\tif(this.elements[i].render(context, false, base)){\r\n");
      out.write("\t\t\t\t\t\tcount++;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcontext.save();\r\n");
      out.write("\t\t\t\tcontext.globalAlpha = count / this.count;\r\n");
      out.write("\t\t\t\tcontext.drawImage(this.tree, 0, 0);\r\n");
      out.write("\t\t\t\tcontext.restore();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var i = 0, length = this.elements.length; i < length; i++){\r\n");
      out.write("\t\t\t\t\tthis.elements[i].render(context, true, base);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tthis.theta += this.DELTA_THETA;\r\n");
      out.write("\t\t\t\tthis.theta %= Math.PI * 2;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar TREE = {\r\n");
      out.write("\t\t\tTRUNK_BASE : 10,\r\n");
      out.write("\t\t\tTRUNK_RATE : 0.8,\r\n");
      out.write("\t\t\tBRANCH_RADIAN : Math.PI / 6,\r\n");
      out.write("\t\t\tBRANCH_RATE : 0.6,\r\n");
      out.write("\t\t\tBRANCH_LEVEL : 7,\r\n");
      out.write("\t\t\tTHRESHOLD : 1.2,\r\n");
      out.write("\t\t\tDELTA_HUE : 0.4,\r\n");
      out.write("\t\t\tCOLOR : 'hsl(120, 50%, 10%)',\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tinit : function(renderer, elements){\r\n");
      out.write("\t\t\t\tvar canvas = $('<canvas />').attr({width : renderer.width, height : renderer.height}).get(0),\r\n");
      out.write("\t\t\t\t\tcontext = canvas.getContext('2d');\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tthis.renderer = renderer;\r\n");
      out.write("\t\t\t\tthis.hue = 0;\r\n");
      out.write("\t\t\t\tthis.render(context, elements);\r\n");
      out.write("\t\t\t\treturn canvas;\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\trender : function(context, elements){\r\n");
      out.write("\t\t\t\tthis.drawTree(context, this.renderer.width / 2, this.renderer.height * 9 / 10, Math.PI / 2, this.renderer.height / 4, this.TRUNK_BASE, 0, elements);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tdrawTree : function(context, x, y, radian, length, width, level, elements){\r\n");
      out.write("\t\t\t\tif (level > this.BRANCH_LEVEL) {\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar sin = length * Math.sin(radian),\r\n");
      out.write("\t\t\t\t\tcos = length * Math.cos(radian);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tthis.drawTree(context, x + cos * this.TRUNK_RATE, y - sin * this.TRUNK_RATE, radian, length * this.TRUNK_RATE, width * this.TRUNK_RATE, level + 1, elements);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var i = -1; i <= 1; i += 2){\r\n");
      out.write("\t\t\t\t\tthis.drawTree(context, x + cos * this.BRANCH_RATE, y - sin * this.BRANCH_RATE, radian + this.BRANCH_RADIAN * i, length * this.BRANCH_RATE, width * this.BRANCH_RATE, level + 1, elements);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcontext.strokeStyle = this.COLOR;\r\n");
      out.write("\t\t\t\tcontext.lineWidth = width;\r\n");
      out.write("\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\tcontext.moveTo(x, y);\r\n");
      out.write("\t\t\t\tcontext.lineTo(x + length*Math.cos(radian), y - length*Math.sin(radian));\r\n");
      out.write("\t\t\t\tcontext.stroke();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(width > this.THRESHOLD && width < this.TRUNK_BASE){\r\n");
      out.write("\t\t\t\t\telements.push(new PARTICLE_LIGHT(this.renderer, x + length * Math.cos(radian), y - length * Math.sin(radian), this.hue));\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tthis.hue += this.DELTA_HUE;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(this.hue == 360){\r\n");
      out.write("\t\t\t\t\t\tthis.hue = 0;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar PARTICLE_LIGHT = function(renderer, x, y, hue){\r\n");
      out.write("\t\t\tthis.renderer = renderer;\r\n");
      out.write("\t\t\tthis.baseX = x;\r\n");
      out.write("\t\t\tthis.baseY = y;\r\n");
      out.write("\t\t\tthis.hue = hue;\r\n");
      out.write("\t\t\tthis.init();\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tPARTICLE_LIGHT.prototype = {\r\n");
      out.write("\t\t\tREACH_INTERVAL_RANGE : {min : 200, max : 10000},\r\n");
      out.write("\t\t\tDELTA_HUE : 0.5,\r\n");
      out.write("\t\t\tDELTA_SATURATION : 0.5,\r\n");
      out.write("\t\t\tDELTA_LUMINANCE : -0.5,\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tinit : function(){\r\n");
      out.write("\t\t\t\tthis.x = this.baseX;\r\n");
      out.write("\t\t\t\tthis.y = this.baseY;\r\n");
      out.write("\t\t\t\tthis.z = this.renderer.DEPTH / 2;\r\n");
      out.write("\t\t\t\tthis.rate = this.z / this.renderer.DEPTH;\r\n");
      out.write("\t\t\t\tthis.radius = this.renderer.RADIUS * this.rate;\r\n");
      out.write("\t\t\t\tthis.vx = this.renderer.getRandomValue({min : -this.renderer.VELOCITY, max : this.renderer.VELOCITY}) * this.rate;\r\n");
      out.write("\t\t\t\tthis.vy = this.renderer.VELOCITY * this.rate;\r\n");
      out.write("\t\t\t\tthis.count = this.renderer.getRandomValue(this.REACH_INTERVAL_RANGE) | 0;\r\n");
      out.write("\t\t\t\tthis.saturation = 0;\r\n");
      out.write("\t\t\t\tthis.verticalThreshold = this.renderer.height * (this.renderer.GROUND_RATE + (1 - this.renderer.GROUND_RATE) * this.rate);\r\n");
      out.write("\t\t\t\tthis.theta = 0;\r\n");
      out.write("\t\t\t\tthis.deltaTheta = -this.vx / 30;\r\n");
      out.write("\t\t\t\tthis.luminance = 80;\r\n");
      out.write("\t\t\t\tthis.scale = 1;\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\trender : function(context){\r\n");
      out.write("\t\t\t\tcontext.save();\r\n");
      out.write("\t\t\t\tcontext.translate(this.x, this.y);\r\n");
      out.write("\t\t\t\tcontext.rotate(this.theta);\r\n");
      out.write("\t\t\t\tcontext.scale(this.scale, this.scale);\r\n");
      out.write("\t\t\t\tcontext.strokeStyle = 'hsl(' + this.hue + ', ' + this.saturation + '%, ' + (this.luminance + 20 * this.rate) + '%)';\r\n");
      out.write("\t\t\t\tcontext.lineWidth = 3 * this.rate / this.scale;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < 3; i++){\r\n");
      out.write("\t\t\t\t\tcontext.save();\r\n");
      out.write("\t\t\t\t\tcontext.rotate(Math.PI * i * 2 / 3);\r\n");
      out.write("\t\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\t\tcontext.moveTo(0, -this.radius);\r\n");
      out.write("\t\t\t\t\tcontext.lineTo(0, this.radius);\r\n");
      out.write("\t\t\t\t\tcontext.stroke();\r\n");
      out.write("\t\t\t\t\tcontext.restore();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcontext.restore();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tthis.hue += this.DELTA_HUE;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(this.hue == 360){\r\n");
      out.write("\t\t\t\t\tthis.hue = 0;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif(this.count > 0){\r\n");
      out.write("\t\t\t\t\tthis.count--;\r\n");
      out.write("\t\t\t\t\tthis.x = this.baseX - this.vx * this.count;\r\n");
      out.write("\t\t\t\t\tthis.y = this.baseY - this.vy * this.count;\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tif(this.saturation < 80){\r\n");
      out.write("\t\t\t\t\t\tthis.saturation += this.DELTA_SATURATION;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(this.luminance > 60){\r\n");
      out.write("\t\t\t\t\t\tthis.luminance += this.DELTA_LUMINANCE;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(this.scale < 2){\r\n");
      out.write("\t\t\t\t\t\tthis.scale += 0.01;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tthis.theta += this.deltaTheta;\r\n");
      out.write("\t\t\t\tthis.theta %= Math.PI * 2;\r\n");
      out.write("\t\t\t\treturn this.count == 0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar PARTICLE_SNOW = function(renderer){\r\n");
      out.write("\t\t\tthis.renderer = renderer;\r\n");
      out.write("\t\t\tthis.init(false);\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tPARTICLE_SNOW.prototype = {\r\n");
      out.write("\t\t\tinit : function(toReset){\r\n");
      out.write("\t\t\t\tthis.z = this.renderer.getRandomValue({min : 1, max : this.renderer.DEPTH});\r\n");
      out.write("\t\t\t\tthis.x = this.renderer.getRandomValue({min : 0, max : this.renderer.width});\r\n");
      out.write("\t\t\t\tthis.y = toReset ? -this.renderer.getRandomValue({min : this.radius, max : this.renderer.height / 3}) : this.renderer.getRandomValue({min : 0, max : this.renderer.height});\r\n");
      out.write("\t\t\t\tthis.rate = this.z / this.renderer.DEPTH;\r\n");
      out.write("\t\t\t\tthis.radius = this.renderer.RADIUS * this.rate;\r\n");
      out.write("\t\t\t\tthis.vx = this.renderer.getRandomValue({min : -this.renderer.VELOCITY, max : this.renderer.VELOCITY}) * this.rate;\r\n");
      out.write("\t\t\t\tthis.vy = this.renderer.VELOCITY * this.rate;\r\n");
      out.write("\t\t\t\tthis.opacity = 1;\r\n");
      out.write("\t\t\t\tthis.verticalThreshold = this.renderer.height * (this.renderer.GROUND_RATE + (1 - this.renderer.GROUND_RATE) * this.rate);\r\n");
      out.write("\t\t\t\tthis.theta = 0;\r\n");
      out.write("\t\t\t\tthis.deltaTheta = -this.vx / 30;\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\trender : function(context, toFront){\r\n");
      out.write("\t\t\t\tif(toFront && this.z <= this.renderer.DEPTH / 2 || !toFront && this.z > this.renderer.DEPTH / 2){\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcontext.save();\r\n");
      out.write("\t\t\t\tcontext.translate(this.x, this.y);\r\n");
      out.write("\t\t\t\tcontext.rotate(this.theta);\r\n");
      out.write("\t\t\t\tcontext.globalAlpha = this.opacity;\r\n");
      out.write("\t\t\t\tcontext.strokeStyle = 'hsl(0, 0%, ' + (80 + 20 * this.rate) + '%)';\r\n");
      out.write("\t\t\t\tcontext.lineWidth = 2 * this.rate;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var i = 0; i < 3; i++){\r\n");
      out.write("\t\t\t\t\tcontext.save();\r\n");
      out.write("\t\t\t\t\tcontext.rotate(Math.PI * i * 2 / 3);\r\n");
      out.write("\t\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\t\tcontext.moveTo(0, -this.radius);\r\n");
      out.write("\t\t\t\t\tcontext.lineTo(0, this.radius);\r\n");
      out.write("\t\t\t\t\tcontext.stroke();\r\n");
      out.write("\t\t\t\t\tcontext.restore();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcontext.restore();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(this.x < -this.radius || this.x > this.renderer.width + this.radius){\r\n");
      out.write("\t\t\t\t\tthis.init(true);\r\n");
      out.write("\t\t\t\t}else if(this.y > this.verticalThreshold){\r\n");
      out.write("\t\t\t\t\tthis.opacity -= 0.05;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(this.opacity <= 0){\r\n");
      out.write("\t\t\t\t\t\tthis.init(true);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tthis.x += this.vx;\r\n");
      out.write("\t\t\t\tthis.y += this.vy;\r\n");
      out.write("\t\t\t\tthis.theta += this.deltaTheta;\r\n");
      out.write("\t\t\t\tthis.theta %= Math.PI * 2;\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tvar HUMAN = function(renderer){\r\n");
      out.write("\t\t\tthis.renderer = renderer;\r\n");
      out.write("\t\t\tthis.init(true);\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\tHUMAN.prototype = {\r\n");
      out.write("\t\t\tHORIZONTAL_OFFSET : 30,\r\n");
      out.write("\t\t\tVERTICAL_OFFSET_RATE_RANGE : {min : 0, max : 0.08},\r\n");
      out.write("\t\t\tVELOCITY_OFFSET : {min : 0.3, max : 0.6},\r\n");
      out.write("\t\t\tWATCHING_COUNT : {min : 100, max : 500},\r\n");
      out.write("\t\t\tWATCHING_RATE : 0.01,\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tinit : function(toInit){\r\n");
      out.write("\t\t\t\tthis.direction = (Math.random() < 0.5) ? 1 : -1;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(toInit){\r\n");
      out.write("\t\t\t\t\tthis.x = this.renderer.getRandomValue({min : 0, max : this.renderer.width});\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tthis.x = (this.direction > 0) ? -this.HORIZONTAL_OFFSET : (this.renderer.width + this.HORIZONTAL_OFFSET);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar position = this.renderer.getRandomValue(this.VERTICAL_OFFSET_RATE_RANGE) * this.renderer.height,\r\n");
      out.write("\t\t\t\t\tverticalPosition = this.renderer.height * this.VERTICAL_OFFSET_RATE_RANGE.max;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tthis.rate = position / verticalPosition;\r\n");
      out.write("\t\t\t\tthis.y = this.renderer.height - position;\r\n");
      out.write("\t\t\t\tthis.vx = this.renderer.getRandomValue(this.VELOCITY_OFFSET) * this.direction;\r\n");
      out.write("\t\t\t\tthis.vxRate = 1.5 * (0.5 + 0.5 * (verticalPosition - position) / verticalPosition);\r\n");
      out.write("\t\t\t\tthis.theta = 0;\r\n");
      out.write("\t\t\t\tthis.verticalThreshold = this.y;\r\n");
      out.write("\t\t\t\tthis.watching = false;\r\n");
      out.write("\t\t\t\tthis.watchingFlag = false;\r\n");
      out.write("\t\t\t\tthis.watchingDone = false;\r\n");
      out.write("\t\t\t\tthis.offset = 0;\r\n");
      out.write("\t\t\t\tthis.count = this.renderer.getRandomValue(this.WATCHING_COUNT) | 0;\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\trender : function(context, toFront, base){\r\n");
      out.write("\t\t\t\tif(!toFront){\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif(this.watching){\r\n");
      out.write("\t\t\t\t\tif(--this.count == 0){\r\n");
      out.write("\t\t\t\t\t\tthis.watching = false;\r\n");
      out.write("\t\t\t\t\t\tthis.watchingFlag = false;\r\n");
      out.write("\t\t\t\t\t\tthis.watchingDone = true;\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\tif(this.offset > -10){\r\n");
      out.write("\t\t\t\t\t\t\tthis.offset -= 0.5;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tif(this.offset < 0){\r\n");
      out.write("\t\t\t\t\t\tthis.offset += 0.5;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(!this.watchingFlag && !this.watchingDone && this.x > this.renderer.width * 2 / 5 && this.x < this.renderer.width * 3 / 5 && Math.random() < this.WATCHING_RATE){\r\n");
      out.write("\t\t\t\t\t\tthis.watchingFlag = true;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar color = 'hsl(210, 50%, ' + ((base - 20) + 20 * this.rate)  + '%)';\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcontext.save();\r\n");
      out.write("\t\t\t\tcontext.translate(this.x, this.y);\r\n");
      out.write("\t\t\t\tcontext.scale(this.direction * this.vxRate, this.vxRate);\r\n");
      out.write("\t\t\t\tcontext.fillStyle = color;\r\n");
      out.write("\t\t\t\tcontext.strokeStyle = color;\r\n");
      out.write("\t\t\t\tcontext.lineWidth = 2;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\tcontext.moveTo(this.offset - 30, -60);\r\n");
      out.write("\t\t\t\tcontext.quadraticCurveTo(this.offset - 20, -75, this.offset, -75);\r\n");
      out.write("\t\t\t\tcontext.quadraticCurveTo(this.offset + 20, -75, this.offset + 30, -60);\r\n");
      out.write("\t\t\t\tcontext.closePath();\r\n");
      out.write("\t\t\t\tcontext.fill();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\tcontext.moveTo(this.offset, -80);\r\n");
      out.write("\t\t\t\tcontext.lineTo(this.offset, -35);\r\n");
      out.write("\t\t\t\tcontext.stroke();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\tcontext.arc(-10, -55, 5, 0, Math.PI * 2, false);\r\n");
      out.write("\t\t\t\tcontext.fill();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\tcontext.moveTo(-15, -50);\r\n");
      out.write("\t\t\t\tcontext.quadraticCurveTo(-20, -40, -15, -30);\r\n");
      out.write("\t\t\t\tcontext.lineTo(-5, -30);\r\n");
      out.write("\t\t\t\tcontext.quadraticCurveTo(0, -40, -5, -50);\r\n");
      out.write("\t\t\t\tcontext.closePath();\r\n");
      out.write("\t\t\t\tcontext.fill();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor(var i = -1; i <= 1; i += 2){\r\n");
      out.write("\t\t\t\t\tcontext.beginPath();\r\n");
      out.write("\t\t\t\t\tcontext.moveTo(-13 + this.offset / 4 * i, -30);\r\n");
      out.write("\t\t\t\t\tcontext.lineTo(-13 + this.offset / 4 * i + 7 * Math.sin(this.theta) * i, -5);\r\n");
      out.write("\t\t\t\t\tcontext.lineTo(-3 + this.offset / 4 * i + this.offset * 2 / 5 + 7 * Math.sin(this.theta) * i, -5);\r\n");
      out.write("\t\t\t\t\tcontext.lineTo(-7 + this.offset / 4 * i + 7 * Math.sin(this.theta) * i, -10);\r\n");
      out.write("\t\t\t\t\tcontext.lineTo(-7 + this.offset / 4 * i, -30);\r\n");
      out.write("\t\t\t\t\tcontext.closePath();\r\n");
      out.write("\t\t\t\t\tcontext.fill();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tcontext.restore();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(!this.watching){\r\n");
      out.write("\t\t\t\t\tthis.theta += this.vx / 5;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(this.theta >= Math.PI * 2 || this.theta <= -Math.PI * 2){\r\n");
      out.write("\t\t\t\t\t\tif(this.watchingFlag){\r\n");
      out.write("\t\t\t\t\t\t\tthis.theta = 0;\r\n");
      out.write("\t\t\t\t\t\t\tthis.watching = true;\r\n");
      out.write("\t\t\t\t\t\t\tthis.watchingFlag = false;\r\n");
      out.write("\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\tthis.theta %= Math.PI * 2;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tthis.x += this.vx * this.vxRate;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif(this.x < -this.HORIZONTAL_OFFSET && this.direction < 0 || this.x > this.renderer.width + this.HORIZONTAL_OFFSET && this.direction > 0){\r\n");
      out.write("\t\t\t\t\tthis.init(false);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t};\r\n");
      out.write("\t\t$(function(){\r\n");
      out.write("\t\t\tRENDERER.init();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</footer>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
